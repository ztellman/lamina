Lamina provides an event-driven analogue to Clojure's sequences, called channels.  Similar mechanisms have been used in languages such as "Go":http://golang.org/,  "JoCaml":http://jocaml.inria.fr/, and "C#":http://msdn.microsoft.com/en-us/devlabs/ee794896.aspx.

Channels are meant to be a generic interface for the creation and consumption of asynchronous events.  Within "Aleph":https://github.com/ztellman/aleph, they are used to represent network communication over a variety of protocols.

Sequences can be turned into channels, and vice versa:

<pre><code>> (def ch (apply channel (range 3)))
<== [0 1 2]
> (channel-seq ch)
(0 1 2)
</code></pre>

Channels can be altered using familiar operators:

<pre><code>> (channel 1 2 3)
<== [1 2 3]
> (map* inc *1)
<== [2 3 4]
> (filter* even? *1)
<== [2 4]
</code></pre>

Channels can be connected to each other, like UNIX pipes:

<pre><code>> (def a (channel))
<== []
> (def b (channel))
<== []
> (siphon (map* inc a) b)
nil
> (enqueue a 1)
true
> b
<== [2]
</code></pre>

To learn more, read the "wiki":https://github.com/ztellman/lamina/wiki/Channels.  Complete documentation can be found "here":http://ztellman.github.com/lamina/.